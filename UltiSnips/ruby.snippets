snippet script
#!/usr/bin/env ruby
$0
`chmod 755 !v%`
endsnippet

snippet allow "allow(obj).to receive"
allow(${1:name}).to receive(${2:method}) { ${0:result} }
endsnippet

snippet if "if <condition> ... end"
if ${1:condition}
	${2:# TODO}
end
endsnippet



snippet ife "if <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
else
	${3:# TODO}
end
endsnippet

snippet var
#{${1:name}\}${2}
endsnippet


snippet "\b(de)?f" "def <name>..."
def ${1:function_name}${2: ${3:*args}}
	${0:# TODO}
end
endsnippet



snippet defi "def initialize ..."
def initialize(${1:*args})
	${0:# TODO}
end
endsnippet

snippet defr "def <name> ... rescue ..."
def ${1:function_name}(${3:*args})
	${4:# TODO}
rescue
	${0:# TODO}
end
endsnippet

snippet pfetch "params.fetch(..., ...)"
params.fetch(${1:key}, ${0:block})
endsnippet

snippet pfetchb "params.fetch(...) { ... }"
params.fetch(${1:key}) { ${0:block} }
endsnippet

##########################
#     Rspec snippets     #
##########################
snippet desc
describe ${1:`substitute(substitute(vim_snippets#Filename(), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
	${0}
end
endsnippet

snippet let
let(:${1:name}) { ${0} }
endsnippet

snippet letp
let(:params) { {${0}} }
endsnippet

snippet letps
let(:params) { super().merge(${0}) }
endsnippet

snippet let!
let!(:${1:name}) { ${0} }
endsnippet

snippet subj
subject(:${1:name}) { described_class.new(${0:params}) }
endsnippet

snippet it
it "${1:spec_name}" do
	${0}
end
endsnippet

snippet expect
expect(${1:actual}).to eq(${0:expected})
endsnippet
